AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
# https://api.netcubed.de/latest/ami/lookup?platform=amzn2
Mappings:
  RegionToAMI:
    us-east-2:
      AMI: ami-04328208f4f0cf1fe
    ca-central-1:
      AMI: ami-0de8b8e4bc1f125fe
    eu-north-1:
      AMI: ami-6d27a913
    eu-west-3:
      AMI: ami-0854d53ce963f69d8
    eu-west-2:
      AMI: ami-0664a710233d7c148
    eu-central-1:
      AMI: ami-0eaec5838478eb0ba
    ap-south-1:
      AMI: ami-0937dcc711d38ef3f
    us-west-1:
      AMI: ami-0799ad445b5727125
    ap-northeast-2:
      AMI: ami-018a9a930060d38aa
    eu-west-1:
      AMI: ami-0fad7378adf284ce0
    us-west-2:
      AMI: ami-032509850cf9ee54e
    sa-east-1:
      AMI: ami-0b04450959586da29
    us-east-1:
      AMI: ami-035be7bafff33b6b6
    ap-northeast-1:
      AMI: ami-0d7ed3ddb85b521a6
    ap-southeast-2:
      AMI: ami-0c9d48b5db609ad6e
    ap-southeast-1:
      AMI: ami-04677bdaa3c2b6e24
Resources:
# https://s3-us-west-2.amazonaws.com/cloudformation-templates-us-west-2/VPC_Single_Instance_In_Subnet.template
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.0.0/24"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachIGW
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
  InboundHTTPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundSSHNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: '200'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  InBoundResponsePortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: '300'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutBoundNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: '400'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  SubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: Subnet
      NetworkAclId:
        Ref: NetworkAcl
  SecurityGroupSSHIn:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - CidrIp: 127.0.0.1/32
        IpProtocol: "-1"
  SecurityGroupHTTPIn:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Enable HTTP via port 80
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - CidrIp: 127.0.0.1/32
        IpProtocol: "-1"
  SecurityGroupAllOut:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Enable HTTP via port 80
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
  AnsibleInstance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: "t3.nano"
      ImageId:
        !FindInMap
        - RegionToAMI
        - !Ref AWS::Region
        - AMI
      KeyName: !Ref KeyName
      Tags:
      - Key: Group
        Value: ansible-test
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: "true"
          GroupSet:
          - !Ref SecurityGroupSSHIn
          - !Ref SecurityGroupHTTPIn
          - !Ref SecurityGroupAllOut
          SubnetId: !Ref Subnet
  AnsibleInstance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: "t3.nano"
      ImageId:
        !FindInMap
        - RegionToAMI
        - !Ref AWS::Region
        - AMI
      KeyName: !Ref KeyName
      Tags:
      - Key: Group
        Value: ansible-test
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: "true"
          GroupSet:
          - !Ref SecurityGroupSSHIn
          - !Ref SecurityGroupHTTPIn
          - !Ref SecurityGroupAllOut
          SubnetId: !Ref Subnet
  SSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
  SSMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: SSMRole
  RunCommandInstance1:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref SSMInstanceProfile
      InstanceType: "t3.nano"
      ImageId:
        !FindInMap
        - RegionToAMI
        - !Ref AWS::Region
        - AMI
      KeyName: !Ref KeyName
      Tags:
      - Key: Group
        Value: runcommand-test
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: "true"
          GroupSet:
          - !Ref SecurityGroupHTTPIn
          - !Ref SecurityGroupAllOut
          SubnetId: !Ref Subnet
  RunCommandInstance2:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref SSMInstanceProfile
      InstanceType: "t3.nano"
      ImageId:
        !FindInMap
        - RegionToAMI
        - !Ref AWS::Region
        - AMI
      KeyName: !Ref KeyName
      Tags:
      - Key: Group
        Value: runcommand-test
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: "true"
          GroupSet:
          - !Ref SecurityGroupHTTPIn
          - !Ref SecurityGroupAllOut
          SubnetId: !Ref Subnet
